Python 3

Install python 3 in RHEL
##############################################################################

yum install gcc openssl-devel bzip2-devel libffi-devel
cd /usr/src
wget https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz
tar xzf Python-3.7.4.tgz
cd Python-3.7.4
./configure --enable-optimizations
make -j 8		- 	Optionally assign a number of jobs ( cpus ) you wanto to assing
sudo make altinstall

cd /usr/local/bin/
./python3.7 --version
./pip3.7 --version
pwd
ln -s /usr/local/bin/python3.7 /bin/python3
python3 --version
ln -s /usr/local/bin/pip3.7 /bin/pip3
pip3 --version
pip3 install boto3


Install python 3 in Debian/Ubuntu
##############################################################################

sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev \
		 libnss3-dev libssl-dev libreadline-dev libffi-dev

* The rest of steps are same as for RHEL



Create a virtual environment in python 3.4 +
##############################################################################
mkdir pythonproject
cd pythonproject 
python3.8.5 -m venv .venv		- Create a directory with python in a virtual env
source ./.venv/bin/activate			- Activate the virtual environmentmkdir pythonproject


Create a virtual environment alternate way. Any python version
##############################################################################
sudo pip install virtualenv		- Install system wide the virtualenv command
virtualenv .venv			- create a directory with python in a virtual env
source .venv/bin.activate


Install a package by also ensuring its getting the latest version
##############################################################################
python -m pip install --upgrade pip
pip install -U pip

##############################################################################
dir(5) 			- show a list of available methods for this int 5
dir('pencil')		- show a list of available methods for this str 'pencil'

##############################################################################
Touples  	- 	()
Lists 		- 	[]
Dictionaries	-	{}

Json
##############################################################################
# Json load to string
>>> import json
>>> jsonstring = '{"name": "erik", "age": 38, "married": true}'
>>> json.loads(jsonstring)
{'name': 'erik', 'age': 38, 'married': True}

# Json dunp to string
>>> myjson = {'name': 'erik', 'age': 38, 'married': True}
>>> json.dumps(myjson)
'{"name": "erik", "age": 38, "married": true}'

# To make the json more readable:
>>> print(json.dumps(myjson, indent=2))
{
  "name": "erik",
  "age": 38,
  "married": true
}

Dictionaries
##############################################################################
dict()   # Dicttionary constructor
dict([ ('Jack', '070-02222748'), ('Pete', '010-2488634'), ('Eric', '06-10101010') ])
{'Jack': '070-02222748', 'Pete': '010-2488634', 'Eric': '06-10101010'}

adict =  {x: x**2 for x in (2, 4, 6)} 	# Dictionary from a dict comprehension
{2: 4, 4: 16, 6: 36}

cities = ('lagos', 'durango', 'mazatlan')
citiesdict = dict.fromkeys(cities)
dict.keys(citiesdict)		# retrieves a dict_keys object with the keys
citiesdict['lagos'] = 'jalisco'
del(citiesdict['durango'])		# Delete one elemento from the dict

list(cities)			# retrieve all the keys from a dict
sorted(cities)			# retrieve the keys from a dict sorted

'lagos' in citiesdict		# check if a key exist in a dict
'torreon' not in citiesdict	# check if a key does not exist in a dict

len(citiesdict)			# retrieve the number of key/value pairs


Lists
##############################################################################
newlist = [ x**2 for x in [2,3,4,5] ]   - List comprehension




